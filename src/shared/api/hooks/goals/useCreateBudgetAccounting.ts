/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "@/shared/api/axios-client";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/shared/api/axios-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type {
  CreateBudgetAccountingMutationRequest,
  CreateBudgetAccountingMutationResponse,
  CreateBudgetAccounting404,
} from "../../models/goals/CreateBudgetAccounting";
import { useMutation } from "@tanstack/react-query";

export const createBudgetAccountingMutationKey = () =>
  [{ url: "/budget/accounting/create" }] as const;

export type CreateBudgetAccountingMutationKey = ReturnType<
  typeof createBudgetAccountingMutationKey
>;

/**
 * {@link /budget/accounting/create}
 */
export async function createBudgetAccounting(
  { data }: { data: CreateBudgetAccountingMutationRequest },
  config: Partial<RequestConfig<CreateBudgetAccountingMutationRequest>> & {
    client?: typeof client;
  } = {},
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    CreateBudgetAccountingMutationResponse,
    ResponseErrorConfig<CreateBudgetAccounting404>,
    CreateBudgetAccountingMutationRequest
  >({
    method: "POST",
    url: `/budget/accounting/create`,
    data,
    ...requestConfig,
  });
  return res.data;
}

/**
 * {@link /budget/accounting/create}
 */
export function useCreateBudgetAccounting<TContext>(
  options: {
    mutation?: UseMutationOptions<
      CreateBudgetAccountingMutationResponse,
      ResponseErrorConfig<CreateBudgetAccounting404>,
      { data: CreateBudgetAccountingMutationRequest },
      TContext
    > & { client?: QueryClient };
    client?: Partial<RequestConfig<CreateBudgetAccountingMutationRequest>> & {
      client?: typeof client;
    };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey =
    mutationOptions.mutationKey ?? createBudgetAccountingMutationKey();

  return useMutation<
    CreateBudgetAccountingMutationResponse,
    ResponseErrorConfig<CreateBudgetAccounting404>,
    { data: CreateBudgetAccountingMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return createBudgetAccounting({ data }, config);
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  );
}
