/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from "@/shared/api/axios-client";
import type {
  RequestConfig,
  ResponseErrorConfig,
} from "@/shared/api/axios-client";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type {
  UpdateProjectParentTaskMutationRequest,
  UpdateProjectParentTaskMutationResponse,
  UpdateProjectParentTaskPathParams,
  UpdateProjectParentTask400,
} from "../../models/projects/UpdateProjectParentTask";
import { useMutation } from "@tanstack/react-query";

export const updateProjectParentTaskMutationKey = () =>
  [{ url: "/projects/{project_id}/parent_tasks/{parent_task_id}" }] as const;

export type UpdateProjectParentTaskMutationKey = ReturnType<
  typeof updateProjectParentTaskMutationKey
>;

/**
 * @summary Update project parent task
 * {@link /projects/:project_id/parent_tasks/:parent_task_id}
 */
export async function updateProjectParentTask(
  {
    parent_task_id,
    project_id,
    data,
  }: {
    parent_task_id: UpdateProjectParentTaskPathParams["parent_task_id"];
    project_id: UpdateProjectParentTaskPathParams["project_id"];
    data: UpdateProjectParentTaskMutationRequest;
  },
  config: Partial<RequestConfig<UpdateProjectParentTaskMutationRequest>> & {
    client?: typeof client;
  } = {},
) {
  const { client: request = client, ...requestConfig } = config;

  const res = await request<
    UpdateProjectParentTaskMutationResponse,
    ResponseErrorConfig<UpdateProjectParentTask400>,
    UpdateProjectParentTaskMutationRequest
  >({
    method: "PATCH",
    url: `/projects/${project_id}/parent_tasks/${parent_task_id}`,
    data,
    ...requestConfig,
  });
  return res.data;
}

/**
 * @summary Update project parent task
 * {@link /projects/:project_id/parent_tasks/:parent_task_id}
 */
export function useUpdateProjectParentTask<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateProjectParentTaskMutationResponse,
      ResponseErrorConfig<UpdateProjectParentTask400>,
      {
        parent_task_id: UpdateProjectParentTaskPathParams["parent_task_id"];
        project_id: UpdateProjectParentTaskPathParams["project_id"];
        data: UpdateProjectParentTaskMutationRequest;
      },
      TContext
    > & { client?: QueryClient };
    client?: Partial<RequestConfig<UpdateProjectParentTaskMutationRequest>> & {
      client?: typeof client;
    };
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {};
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey =
    mutationOptions.mutationKey ?? updateProjectParentTaskMutationKey();

  return useMutation<
    UpdateProjectParentTaskMutationResponse,
    ResponseErrorConfig<UpdateProjectParentTask400>,
    {
      parent_task_id: UpdateProjectParentTaskPathParams["parent_task_id"];
      project_id: UpdateProjectParentTaskPathParams["project_id"];
      data: UpdateProjectParentTaskMutationRequest;
    },
    TContext
  >(
    {
      mutationFn: async ({ parent_task_id, project_id, data }) => {
        return updateProjectParentTask(
          { parent_task_id, project_id, data },
          config,
        );
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  );
}
